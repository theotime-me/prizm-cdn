{"packages": {
	"platform": {
		"desc": "Integrate Prizm apis into your website.",
		"examples": ["platform.load()"],
		"dependencies": ["getStyle"],
		"keywords": ["api", "package"],
		"size": 1.02,
		"type": "client"
	},

	"ajax": {
		"desc": "Access any file(s) over the Internet, using any browser.",
		"examples": ["ajax({url: string, async: boolean, success: function, error: function, progress: function, parse: boolean})"],
		"keywords": ["xhr", "fetch", "get", "post"],
		"size": 1.02,
		"type": "network"
	},
	
	"hoverview": {
		"desc": "A better user experience with links.",
		"examples": ["hoverview(selector: element)"],
		"dependencies": ["prettify", "cutty", "ajax", "browser"],
		"keywords": ["link", "links", "hover", "overview"],
		"size": 1.02,
		"type": "experience"
	},
	
	"prettify": {
		"desc": "Clean and beautify any string. As simple as that !",
		"examples": ["hoverview(selector: element)"],
		"keywords": ["pretty", "beauty", "clean", "string"],
		"size": 1.02,
		"type": "basics"
	},
	
	"cutty": {
		"desc": "Cut any string sharper or prettier as possible !",
		"examples": ["hoverview(selector: element)"],
		"keywords": ["cut"],
		"size": 1.02,
		"type": "basics"
	},

	"date": {
		"desc": "A smart way to manipulate time values.",
		"examples": ["date(parameter: string|number|Date)"],
		"keywords": ["month", "day", "year", "hour", "minute", "second"],
		"size": 0.921,
		"type": "basics"
	},

	"scrollTop": {
		"desc": "Scroll to the top of the page with one function.",
		"examples": ["scrollTop()"],
		"keywords": ["page", "scroll", "top"],
		"size": 0.220,
		"type": "basics"
	},

	"cookies": {
		"desc": "Allow to set and get cookies quickly and easily in Javascript !",
		"examples": ["getCookie(name: string)", "setCookie(name: string, value:string|number, days:number)"],
		"keywords": ["cookie", "set", "get", "save", "navigator"],
		"size": 0.744,
		"type": "client"
	},

	"os": {
		"desc": "Get the OS of any user.",
		"examples": ["os(name: string)"],
		"keywords": ["system", "computer", "operating"],
		"size": 0.406,
		"type": "client"
	},

	"browser": {
		"desc": "Detects and compares the user's web browser.",
		"examples": ["browser(name: string)"],
		"keywords": ["navigator", "detect"],
		"size": 0.688,
		"type": "client"
	},

	"history": {
		"desc": "Browse into the browser's history.",
		"examples": ["history(go: string|number)"],
		"keywords": ["back", "prev", "next", "previous", "browse"],
		"size": 0.468,
		"type": "client"
	},

	"isMobile": {
		"desc": "Check if the page is displayed on a mobile device.",
		"examples": ["isMobile()"],
		"keywords": ["phone", "responsive", "mobile"],
		"size": 0.288,
		"type": "client"
	},

	"lang": {
		"desc": "Detects and compares the user language.",
		"examples": ["lang(lang: string)"],
		"keywords": ["language", "translate", "speak", "speaking"],
		"size": 0.233,
		"type": "client"
	},

	"popup": {
		"desc": "Shows a popup page on the browser.",
		"examples": ["popup(url: string, title: string, height: number, width: number)"],
		"keywords": ["url", "show", "window"],
		"size": 0.363,
		"type": "client"
	},

	"print": {
		"desc": "Asks the user to print the page with the default browser popup.",
		"examples": ["print()"],
		"keywords": ["page"],
		"size": 0.157,
		"type": "client"
	},

	"screen": {
		"desc": "Gets info about the screen width and height.",
		"examples": ["screen(value: \"height\" OR \"width\")"],
		"keywords": ["width", "height", "page"],
		"size": 0.245,
		"type": "client"
	},

	"title": {
		"desc": "Gets or set the current title of the page.",
		"examples": ["title(newTitle: string)"],
		"keywords": ["tab"],
		"size": 0.249,
		"type": "client"
	},

	"get": {
		"desc": "Gets url parameters after the \"?\".",
		"examples": ["url(param: string)"],
		"keywords": ["get", "param", "url"],
		"size": 0.340,
		"type": "basics"
	},

	"url": {
		"desc": "Sets or gets the current url to a new destination.",
		"examples": ["url(target: string)"],
		"keywords": ["set", "target", "link"],
		"size": 0.261,
		"type": "basics"
	},

	"getStyle": {
		"desc": "Import a css file using Javascript. Stylish !",
		"examples": ["getStyle(url: string, cb: function)"],
		"dependencies": ["ajax"],
		"keywords": ["import", "download", "style", "css", "fetch", "get"],
		"size": 1.02,
		"type": "network"
	},

	"getScript": {
		"desc": "Import a javascript file using Javascript ! Script-ception.",
		"examples": ["getScript(url: string, cb: function)"],
		"dependencies": ["ajax"],
		"keywords": ["get", "script", "eval", "download", "fetch", "include", "js", "javascript"],
		"size": 0.424,
		"type": "network"
	},

	"getJSON": {
		"desc": "Get a JSON file from any url and return it.",
		"examples": ["getJSON(url: string, cb: function)"],
		"dependencies": ["ajax"],
		"keywords": ["get", "json", "data", "api", "fetch"],
		"size": 0.487,
		"type": "network"
	},

	"id": {
		"desc": "Creates a random and unique identifier",
		"examples": ["id(params: object, cb: function)"],
		"keywords": ["identifier", "get", "random", "unique"],
		"size": 0,
		"type": "basics"
	}
},

"core": {
	"html": {
		"examples": ["html(html: string)"],
		"keywords": ["html", "innerhtml", "fill", "text"],
		"desc": "Fills all matched nodes with a string or a node."
	},

	"append": {
		"examples": ["append(html: string)"],
		"keywords": ["html", "innerhtml", "fill", "text", "after"],
		"desc": "Appends a string or a node to all matched nodes."
	},

	"prepend": {
		"examples": ["prepend(callback: function)"],
		"keywords": ["html", "innerhtml", "fill", "text", "before"],
		"desc": "Prepends a string or a node to all matched nodes."
	},

	"each": {
		"examples": ["each(callback: function)"],
		"keywords": ["loop", "foreach", "for"],
		"desc": "Loops into all matched nodes and call a function for each."
	},

	"first": {
		"examples": ["first(callback: function)"],
		"keywords": ["node"],
		"desc": "Returns the first node or call a function with it."
	},

	"last": {
		"examples": ["last(callback: function)"],
		"keywords": ["node"],
		"desc": "Returns the last node or call a function with it."
	},

	"parent": {
		"examples": ["last(callback: function)"],
		"keywords": ["node"],
		"desc": "Returns the parent node or call a function with the last node."
	},

	"prop": {
		"examples": ["prop(prop: string, value: string|number)"],
		"keywords": ["property", "get", "set"],
		"desc": "Sets or get a property for any element."
	},

	"addClass": {
		"examples": ["addClass(className: string|array)"],
		"keywords": ["add", "class", "classname"],
		"desc": "Adds class to all matching nodes."
	},

	"removeClass": {
		"examples": ["removeClass(className: string|array)"],
		"keywords": ["remove", "class", "classname"],
		"desc": "Removes class to all matching nodes."
	},

	"toggleClass": {
		"examples": ["toggleClass(className: string|array)"],
		"keywords": ["toggle", "class", "classname"],
		"desc": "Toggles class to all matching nodes."
	},

	"hasClass": {
		"examples": ["hasClass(className: string)"],
		"keywords": ["has", "class", "classname"],
		"desc": "Returns \"true\" if the first node has the specify class"
	},

	"remove": {
		"examples": ["remove()"],
		"keywords": ["remove", "node", "element"],
		"desc": "Removes all matched nodes."
	},

	"removeAttr": {
		"examples": ["removeAttr(attr: string)"],
		"keywords": ["remove", "attr", "attribute"],
		"desc": "Removes an attribute to any element."
	},

	"attr": {
		"examples": ["attr(attr: string, value: string|number)"],
		"keywords": ["set", "add", "attr", "attribute"],
		"desc": "Set an attribute to any element."
	},

	"hide": {
		"examples": ["hide(duration: string|number)"],
		"keywords": ["opacity", "fade"],
		"desc": "Set an attribute to any element."
	},

	"show": {
		"examples": ["attr(attr: string, value: string|number)"],
		"keywords": ["set", "add", "attr", "attribute"],
		"desc": "Set an attribute to any element."
	},

	"after": {
		"examples": ["after(html: string)"],
		"keywords": ["insert", "after", "html", "adjacent"],
		"desc": "Insert a string or a node after existing node(s)."
	},

	"before": {
		"examples": ["before(html: string)"],
		"keywords": ["insert", "before", "html", "adjacent"],
		"desc": "Insert a string or a node before existing node(s)."
	}
}
}