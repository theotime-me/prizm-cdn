{"packages": {
	"platform": {
		"desc": "Integrate Prizm apis into your website.",
		"examples": ["platform.load()"],
		"dependencies": ["getStyle"],
		"keywords": ["api", "package"],
		"size": 1.02,
		"type": "client"
	},

	"ajax": {
		"desc": "Access any file(s) over the Internet, using any browser.",
		"examples": ["ajax({url, urls, method, async, success, error, progress, parse})"],
		"args": {
			"url": {
				"type": "string",
				"desc": "The url you want to fetch.",
				"required": true,
				"ex": "https://randomuser.me/api/"
			},

			"urls": {
				"type": "array",
				"desc": "Fetch multiples urls with the same settings.",
				"note": "Incompatible with «url» parameter («urls» has priority)"
			},

			"async": {
				"type": "boolean",
				"desc": "Sets the query to \"asynchronous\" (true) and \"synchronous\" (false)",
				"default": true
			},

			"method": {
				"type": "string",
				"desc": "Sets the method of the request",
				"values": ["GET", "POST", "PUT", "PATCH", "DELETE"],
				"default": "GET"
			},

			"success": {
				"type": "function",
				"desc": "This function is executed only when the request succeed. (200)",
				"args": {
					"result": {
						"type": "string|obj",
						"desc": "The full content of the requested file."
					},

					"type": {
						"type": "string",
						"desc": "HTTP content-type",
						"ex": "text/css"
					}
				}
			},

			"error": {
				"type": "function",
				"desc": "This function is executed only when the request failed.",
				"args": {
					"status": {
						"type": "number",
						"desc": "The request's HTTP status code",
						"ex": 404
					}
				}
			},

			"progress": {
				"type": "function",
				"desc": "The url you want to fetch.",
				"args": {
					"percent": {
						"type": "number",
						"desc": "The evolution of the HTTP request, in a percentage format.",
						"ex": 75
					}
				}
			},

			"parse": {
				"type": "boolean",
				"desc": "Parse or not parseable files (like json)",
				"default": true
			}
		},
		"keywords": ["xhr", "fetch", "get", "post"],
		"size": 1.02,
		"docs": true,
		"type": "network"
	},
	
	"hoverview": {
		"desc": "A better user experience with links.",
		"examples": ["hoverview(selector)"],
		"args": {
			"selector": {
				"type": "element",
				"desc": "The Hoverview will appear around these elements when they will be hovered.",
				"ex"  : "#article a",
				"default": "$(\"a\")"
			}
		},
		"dependencies": ["prettify", "cutty", "ajax", "browser"],
		"keywords": ["link", "links", "hover", "overview"],
		"size": 1.02,
		"type": "experience"
	},

	"ultralink": {
		"desc": "Makes links great again (really).",
		"examples": ["ultralink()"],
		"dependencies": ["getStyle"],
		"keywords": ["link", "links", "ultra", "enhance", "improve"],
		"size": 1.02,
		"type": "experience"
	},
	
	"prettify": {
		"desc": "Clean and beautify any string. As simple as that !",
		"examples": ["prettify(string)"],
		"args": {
			"string": {
				"type": "string",
				"desc": "The string that will be prettified",
				"ex": "The quick brown fox jumps over the lazy dog.",
				"required": true
			}
		},
		"keywords": ["pretty", "beauty", "clean", "string"],
		"size": 1.02,
		"type": "basics"
	},
	
	"cutty": {
		"desc": "Cut any string sharper or prettier as possible !",
		"examples": ["cutty(string, length, pretty, dots)"],
		"args": {
			"string": {
				"type": "string",
				"desc": "The string that'll be cut.",
				"required": true
			},

			"length": {
				"type": "number",
				"desc": "The future length of the string",
				"required": true
			},

			"pretty": {
				"type": "boolean",
				"desc": "Set whether it's pretty or not.",
				"default": true
			},

			"dots": {
				"type": "boolean",
				"desc": "Configure the addition of suspension points at the end of the cut string.",
				"default": true
			}
		},
		"keywords": ["cut"],
		"size": 1.02,
		"docs": true,
		"type": "basics"
	},

	"date": {
		"desc": "A smart way to manipulate time values.",
		"examples": ["date(parameter)"],
		"args": {
			"parameter": {
				"type": "string|number|Date",
				"desc": "A date from which to start to perform operations (or not) with.",
				"ex": "yesterday"
			}
		},
		"keywords": ["month", "day", "year", "hour", "minute", "second"],
		"size": 0.921,
		"type": "basics"
	},

	"scrollTop": {
		"desc": "Scroll to the top of the page with one function.",
		"examples": ["scrollTop()"],
		"keywords": ["page", "scroll", "top"],
		"size": 0.220,
		"type": "basics"
	},

	"cookies": {
		"desc": "Allow to set and get cookies quickly and easily in Javascript !",
		"examples": ["getCookie(name)", "setCookie(name, value, days)"],
		"args": [
			{
				"name": {
					"type": "string",
					"desc": "Compare the os provided as argument with the actual os.",
					"ex": "foo"
				}
			},

			{
				"name": {
					"type": "string",
					"desc": "What will be the name of this all new cookie ?",
					"ex": "foo"
				},

				"value": {
					"type": "string|number",
					"desc": "The value of the new cookie.",
					"ex": "bar"
				},

				"days": {
					"type": "number",
					"desc": "How many days will this cookie stay ?",
					"ex": 31
				}
			}
		],
		"keywords": ["cookie", "set", "get", "save", "navigator"],
		"size": 0.744,
		"docs": true,
		"type": "client"
	},

	"os": {
		"desc": "Get the OS of any user.",
		"examples": ["os(name)"],
		"args": {
			"name": {
				"type": "string",
				"desc": "Compare the os provided as argument with the actual os.",
				"ex": "macOS"
			}
		},
		"keywords": ["system", "computer", "operating"],
		"size": 0.406,
		"type": "client"
	},

	"browser": {
		"desc": "Detects and compares the user's web browser.",
		"examples": ["browser(name)"],
		"args": {
			"name": {
				"type": "string",
				"desc": "Compare the browser name provided as argument with the actual browser.",
				"ex": "Firefox"
			}
		},
		"keywords": ["navigator", "detect"],
		"size": 0.688,
		"docs": true,
		"type": "client"
	},

	"history": {
		"desc": "Browse into the browser's history.",
		"examples": ["history(go)"],
		"args": {
			"go": {
				"type": "string|number",
				"desc": "Provide a keyword or a number (like -2) to move into the browser's history.",
				"values": ["forward", "back", "next", "previous", "after", "before"],
				"required": true
			}
		},
		"keywords": ["back", "prev", "next", "previous", "browse"],
		"size": 0.468,
		"type": "client"
	},

	"isMobile": {
		"desc": "Check if the page is displayed on a mobile device.",
		"examples": ["isMobile()"],
		"keywords": ["phone", "responsive", "mobile"],
		"size": 0.288,
		"type": "client"
	},

	"lang": {
		"desc": "Detects and compares the user language.",
		"examples": ["lang(lang)"],
		"args": {
			"lang": {
				"type": "string",
				"desc": "A lang to compare with the actual language of the browser.",
				"ex": "fr-fr"
			}
		},
		"keywords": ["language", "translate", "speak", "speaking"],
		"size": 0.233,
		"type": "client"
	},

	"popup": {
		"desc": "Shows a popup page on the browser.",
		"examples": ["popup(url, title, height, width)"],
		"args": {
			"url": {
				"type": "string",
				"desc": "The url that will be opened in the popup window.",
				"required": true,
				"ex": "https://raw.githubusercontent.com/theotime-me/pzm/master/prizm.js"
			},

			"title": {
				"type": "number",
				"desc": "The title of the window",
				"required": true
			},

			"height": {
				"type": "string",
				"desc": "The height of the popup window in pixels.",
				"required": true
			},

			"width": {
				"type": "string",
				"desc": "The width of the popup window in pixels.",
				"required": true
			}
		},
		"keywords": ["url", "show", "window"],
		"size": 0.363,
		"type": "client"
	},

	"print": {
		"desc": "Asks the user to print the page with the default browser popup.",
		"examples": ["print()"],
		"keywords": ["page"],
		"size": 0.157,
		"docs": true,
		"type": "client"
	},

	"screen": {
		"desc": "Gets info about the screen width and height.",
		"examples": ["screen(value)"],
		"args": {
			"value": {
				"type": "string",
				"desc": "Select which data you want to know about.",
				"values": ["width", "height"],
				"required": false,
				"default": "«width»*«height»"
			}
		},
		"keywords": ["width", "height", "page"],
		"size": 0.245,
		"type": "client"
	},

	"title": {
		"desc": "Gets or set the current title of the page.",
		"examples": ["title(newTitle)"],
		"args": {
			"newTitle": {
				"type": "string",
				"desc": "Set the new title of the page"
			}
		},
		"keywords": ["tab"],
		"size": 0.249,
		"type": "client"
	},

	"get": {
		"desc": "Gets url parameters after the \"?\".",
		"examples": ["get(param)"],
		"args": {
			"param": {
				"type": "string",
				"desc": "Get the url query having this name."
			}
		},
		"keywords": ["get", "param", "url"],
		"size": 0.340,
		"type": "basics"
	},

	"url": {
		"desc": "Sets or gets the current url to a new destination.",
		"examples": ["url(target)"],
		"args": {
			"target": {
				"type": "string",
				"desc": "New url to redirect to.",
				"ex": "http://prizm-website.herokuapp.com/"
			}
		},
		"keywords": ["set", "target", "link"],
		"size": 0.261,
		"type": "basics"
	},

	"getStyle": {
		"desc": "Import a css file using Javascript. Stylish !",
		"examples": ["getStyle(url, cb)"],
		"args": {
			"url": {
				"type": "string",
				"desc": "The css stylesheet's url you want to execute.",
				"required": true,
				"ex": "https://raw.githubusercontent.com/theotime-me/pzm/master/packages/hoverview.css"
			},

			"cb": {
				"type": "function",
				"desc": "Executed when the request succeed and when the css was executed."
			}
		},
		"dependencies": ["ajax"],
		"keywords": ["import", "download", "style", "css", "fetch", "get"],
		"size": 1.02,
		"type": "network"
	},

	"getScript": {
		"desc": "Import a javascript file using Javascript ! Script-ception.",
		"examples": ["getScript(url, cb)"],
		"args": {
			"url": {
				"type": "string",
				"desc": "The script's url you want to download and run.",
				"required": true,
				"ex": "https://raw.githubusercontent.com/theotime-me/pzm/master/packages/hoverview.js"
			},

			"cb": {
				"type": "function",
				"desc": "Ran when the script has been executed",
				"args": {
					"status": {
						"type": "number",
						"desc": "The request's HTTP status code",
						"ex": 404
					}
				}
			}
		},
		"dependencies": ["ajax"],
		"keywords": ["get", "script", "eval", "download", "fetch", "include", "js", "javascript"],
		"size": 0.424,
		"docs": true,
		"type": "network"
	},

	"getJSON": {
		"desc": "Get a JSON file from any url and return it.",
		"examples": ["getJSON(url, cb)"],
		"args": {
			"url": {
				"type": "string",
				"desc": "The JSON's url you want to fetch.",
				"required": true
			},

			"cb": {
				"type": "function",
				"desc": "Returns the JSON file parsed into javascript object.",
				"args": {
					"status": {
						"type": "obj",
						"desc": "The javascript object contained in the file."
					}
				}
			}
		},
		"dependencies": ["ajax"],
		"keywords": ["get", "json", "data", "api", "fetch"],
		"size": 0.487,
		"type": "network"
	},

	"id": {
		"desc": "Creates a random and unique identifier",
		"examples": ["id(params, cb)"],
		"args": {
			"params": {
				"type": "string",
				"desc": "Configure the way the «id» is generated."
			},

			"cb": {
				"type": "function",
				"desc": "Returns the id as function's argument.",
				"args": {
					"id": {
						"type": "string",
						"desc": "The identifier requested.",
						"ex": "WKydF_3gxfw"
					}
				}
			}
		},
		"keywords": ["identifier", "get", "random", "unique"],
		"size": 0,
		"type": "basics"
	},

	"copy": {
		"desc": "Copy anything to clipboard easily.",
		"examples": ["copy(data, cb)"],
		"args": {
			"data": {
				"type": "string|number|file",
				"desc": "The data to copy."
			},

			"cb": {
				"type": "function",
				"desc": "To check the success of operation.",
				"args": {
					"status": {
						"type": "boolean",
						"desc": "Returns \"true\" when it worked, false otherwise.",
						"ex": "true"
					},

					"err": {
						"type": "string",
						"desc": "If it failed, here is the problem."
					}
				}
			}
		},
		"keywords": ["copyboard", "paste", "data", "file"],
		"size": 0,
		"dependencies": ["shift"],
		"type": "client"
	},

	"shift": {
		"desc": "Convert any file to any format.",
		"examples": ["shift(file, ext, cb)"],
		"args": {
			"data": {
				"type": "file|blob",
				"desc": "File/Blob you want to convert."
			},

			"ext": {
				"type": "string|number|file",
				"desc": "Future extension of the file",
				"ex": "png"
			},

			"cb": {
				"type": "function",
				"desc": "The only way to get the new file.",
				"args": {
					"blob": {
						"type": "blob",
						"desc": "The blob freshly converted."
					}
				}
			}
		},
		"keywords": ["convert"],
		"size": 0,
		"type": "basics"
	}
},

"core": {
	"html": {
		"examples": ["html(html: string)"],
		"keywords": ["html", "innerhtml", "fill", "text"],
		"desc": "Fills all matched nodes with a string or a node."
	},

	"append": {
		"examples": ["append(html: string)"],
		"keywords": ["html", "innerhtml", "fill", "text", "after"],
		"desc": "Appends a string or a node to all matched nodes."
	},

	"prepend": {
		"examples": ["prepend(callback: function)"],
		"keywords": ["html", "innerhtml", "fill", "text", "before"],
		"desc": "Prepends a string or a node to all matched nodes."
	},

	"each": {
		"examples": ["each(callback: function)"],
		"keywords": ["loop", "foreach", "for"],
		"desc": "Loops into all matched nodes and call a function for each."
	},

	"first": {
		"examples": ["first(callback: function)"],
		"keywords": ["node"],
		"desc": "Returns the first node or call a function with it."
	},

	"last": {
		"examples": ["last(callback: function)"],
		"keywords": ["node"],
		"desc": "Returns the last node or call a function with it."
	},

	"parent": {
		"examples": ["last(callback: function)"],
		"keywords": ["node"],
		"desc": "Returns the parent node or call a function with the last node."
	},

	"prop": {
		"examples": ["prop(prop: string, value: string|number)"],
		"keywords": ["property", "get", "set"],
		"desc": "Sets or get a property for any element."
	},

	"addClass": {
		"examples": ["addClass(className: string|array)"],
		"keywords": ["add", "class", "classname"],
		"desc": "Adds class to all matching nodes."
	},

	"removeClass": {
		"examples": ["removeClass(className: string|array)"],
		"keywords": ["remove", "class", "classname"],
		"desc": "Removes class to all matching nodes."
	},

	"toggleClass": {
		"examples": ["toggleClass(className: string|array)"],
		"keywords": ["toggle", "class", "classname"],
		"desc": "Toggles class to all matching nodes."
	},

	"hasClass": {
		"examples": ["hasClass(className: string)"],
		"keywords": ["has", "class", "classname"],
		"desc": "Returns \"true\" if the first node has the specify class"
	},

	"remove": {
		"examples": ["remove(selector)"],
		"keywords": ["remove", "node", "element"],
		"desc": "Removes nodes from different contexts."
	},

	"removeAttr": {
		"examples": ["removeAttr(attr: string)"],
		"keywords": ["remove", "attr", "attribute"],
		"desc": "Removes an attribute to any element."
	},

	"attr": {
		"examples": ["attr(attr: string, value: string|number)"],
		"keywords": ["set", "add", "attr", "attribute"],
		"desc": "Set an attribute to any element."
	},

	"hide": {
		"examples": ["hide(duration: string|number)"],
		"keywords": ["opacity", "fade"],
		"desc": "Set an attribute to any element."
	},

	"show": {
		"examples": ["attr(attr: string, value: string|number)"],
		"keywords": ["set", "add", "attr", "attribute"],
		"desc": "Set an attribute to any element."
	},

	"after": {
		"examples": ["after(html: string)"],
		"keywords": ["insert", "after", "html", "adjacent"],
		"desc": "Insert a string or a node after existing node(s)."
	},

	"before": {
		"examples": ["before(html: string)"],
		"keywords": ["insert", "before", "html", "adjacent"],
		"desc": "Insert a string or a node before existing node(s)."
	}
}
}
